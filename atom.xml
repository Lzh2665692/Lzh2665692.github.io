<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://lzh2665692.github.io</id>
    <title>子哥の小破站</title>
    <updated>2022-07-14T03:27:04.652Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://lzh2665692.github.io"/>
    <link rel="self" href="https://lzh2665692.github.io/atom.xml"/>
    <subtitle>子非鱼，安知鱼之乐.....</subtitle>
    <logo>https://lzh2665692.github.io/images/avatar.png</logo>
    <icon>https://lzh2665692.github.io/favicon.ico</icon>
    <rights>All rights reserved 2022, 子哥の小破站</rights>
    <entry>
        <title type="html"><![CDATA[完美解决Github个人博客不被百度收录的问题]]></title>
        <id>https://lzh2665692.github.io/post/wan-mei-jie-jue-github-ge-ren-bo-ke-bu-bei-bai-du-shou-lu-de-wen-ti</id>
        <link href="https://lzh2665692.github.io/post/wan-mei-jie-jue-github-ge-ren-bo-ke-bu-bei-bai-du-shou-lu-de-wen-ti">
        </link>
        <updated>2022-07-14T03:22:07.000Z</updated>
        <summary type="html"><![CDATA[<h1 id="序言">序言</h1>
<p>我这个博客本来是挂在 GitHub Pages，但是后来发现Github把百度的爬虫给办了（好像是百度的爬虫爬的太狠，影响Github pages的正常使用），这也就导致了我部署在Github上的个人博客无法被收录。后来Cloudflare Page推出，这个问题也就迎刃而解了。<br>
为了让广大网友不被此问题侵扰，特写此文。</p>
<h1 id="cloudflare-pages的优点">Cloudflare Pages的优点</h1>
<ul>
<li>CloudFlare Pages 没被墙</li>
<li>CloudFlare Pages 自选IP后尤其是移动，速度比隔壁 Vercel 还要快不少，不信你可以看我博客的评论区，评论系统就是部署在 Vercel 东京机房的（</li>
<li>CloudFlare Pages 本身就集成了 CI/CD，而且我个人感觉比 GitHub Action 以及 Travis CI 稳定，也省得折腾，唯一的限制就是每个月免费构建额度是500次，但这也已经很够用了吧（</li>
<li>CloudFlare Pages 的自动化构建可以从 private repository 拉取源文件，不像 GitHub Pages 必须是 public repo</li>
<li>支持多个自定义域名</li>
<li>CloudFlare Pages 没有 ban 掉百度爬虫，百度收录正常</li>
</ul>
]]></summary>
        <content type="html"><![CDATA[<h1 id="序言">序言</h1>
<p>我这个博客本来是挂在 GitHub Pages，但是后来发现Github把百度的爬虫给办了（好像是百度的爬虫爬的太狠，影响Github pages的正常使用），这也就导致了我部署在Github上的个人博客无法被收录。后来Cloudflare Page推出，这个问题也就迎刃而解了。<br>
为了让广大网友不被此问题侵扰，特写此文。</p>
<h1 id="cloudflare-pages的优点">Cloudflare Pages的优点</h1>
<ul>
<li>CloudFlare Pages 没被墙</li>
<li>CloudFlare Pages 自选IP后尤其是移动，速度比隔壁 Vercel 还要快不少，不信你可以看我博客的评论区，评论系统就是部署在 Vercel 东京机房的（</li>
<li>CloudFlare Pages 本身就集成了 CI/CD，而且我个人感觉比 GitHub Action 以及 Travis CI 稳定，也省得折腾，唯一的限制就是每个月免费构建额度是500次，但这也已经很够用了吧（</li>
<li>CloudFlare Pages 的自动化构建可以从 private repository 拉取源文件，不像 GitHub Pages 必须是 public repo</li>
<li>支持多个自定义域名</li>
<li>CloudFlare Pages 没有 ban 掉百度爬虫，百度收录正常</li>
</ul>
<!--more-->
<h1 id="部署">部署</h1>
<h2 id="序言-2">序言</h2>
<p>我的博客使用Hexo驱动的，所以在这里就使用Hexo为演示步骤，其他建站系统也大同小异。</p>
<h2 id="添加站点">添加站点</h2>
<p>我们首先在 CloudFlare 管理面板导航栏即可找到 Pages 服务 (简体中文为 “网页”)，进入页面后，点击 <code>创建项目</code> 。选择<code>连接到git</code>。<br>
接着绑定部署着你的博客的Github账号，选择你部署博客的仓库。<br>
<img src="http://zigeltd.eu.org/?/images/2022/07/14/tk5v8KsMA9/gsfn.png" alt="选择仓库" title="选择仓库" loading="lazy"></p>
<p>点击<code>开始设置</code>，进入<code>设置构建和部署</code>界面。<code>框架预设</code>选择None，<code>构建指令</code>输入<code>exit 0</code>，其他选项保持默认。<br>
<img src="http://zigeltd.eu.org/?/images/2022/07/14/elq4gWFucN/bbn.png" alt="构建和部署" title="构建和部署" loading="lazy"></p>
<p>接着点击<code>保存并部署</code>，进入<code>部署站点</code>页面，稍等片刻即可部署完成。<br>
<img src="http://zigeltd.eu.org/?/images/2022/07/14/4ulWzCJ17w/nbv.png" alt="成功部署1" title="成功部署1" loading="lazy"><br>
<img src="http://zigeltd.eu.org/?/images/2022/07/14/r7ZO1vP0Z4/y.png" alt="成功部署2" title="成功部署2" loading="lazy"></p>
<p>最后使用Cloudflare分配给你的二级域名即可访问你的博客啦~</p>
<h2 id="绑定自定义域名">绑定自定义域名</h2>
<p>绑定非 CloudFlare 上购买/解析的自定义域名时需要验证 DNS 记录，CloudFlare Pages 要求 CNAME 记录指向它给你分配的二级域名，但众所周知 CNAME 记录和 MX 记录会有一定冲突，可能导致你的域名邮箱收不到邮件。<br>
这时我们只要把CNAME记录换为A和AAAA记录即可。</p>
<table>
<thead>
<tr>
<th>类型</th>
<th style="text-align:center">名称</th>
<th style="text-align:right">内容</th>
</tr>
</thead>
<tbody>
<tr>
<td>A</td>
<td style="text-align:center">@</td>
<td style="text-align:right">1.1. 1.1</td>
</tr>
<tr>
<td>A</td>
<td style="text-align:center">@</td>
<td style="text-align:right">1.0. 0.1</td>
</tr>
<tr>
<td>AAAA</td>
<td style="text-align:center">@</td>
<td style="text-align:right">2606:4700:4700::1111</td>
</tr>
<tr>
<td>AAAA</td>
<td style="text-align:center">@</td>
<td style="text-align:right">2606:4700:4700::1001</td>
</tr>
</tbody>
</table>
<h1 id="最后">最后</h1>
<p>不过有一点需要说明，在解析的时候，建议不要把天朝指向到 IPv6 的 CDN，真的很卡……</p>
<p>具体国内分运营商解析还需要再配置，网上自选 CloudFlare 工具的轮子很多，网友跑出来的结果也很完整了。没错，使用 CloudFlare Pages 不用 CloudFlare Partner 也能用自选 IP CDN，这也算一个好处吧。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[大陆轻松访问TikTok镜像站]]></title>
        <id>https://lzh2665692.github.io/post/tiktok</id>
        <link href="https://lzh2665692.github.io/post/tiktok">
        </link>
        <updated>2022-07-12T12:16:33.000Z</updated>
        <summary type="html"><![CDATA[<h1 id="使用说明">使用说明</h1>
<p>本项目仍然是使用全球最大的CDN服务商——CloudFlare提供的<code>Workers</code>。</p>
<p>下面我将告诉你们自己搭建Tiktok镜像站点的方法，以解决在天朝无法访问Tiktok的问题。</p>
<h1 id="开启workers">开启workers</h1>
<p>在控制面板主页左侧可以找到<code>workers</code>。<br>
可以将<code>workers</code>理解为cloudflare的一款proxy服务，这个服务的一大优点就是自带CDN。按照官方的说法：</p>
<blockquote>
<p>构建无服务器应用程序并在全球范围内即时部署，从而获得卓越的性能、可靠性和规模性。</p>
</blockquote>
]]></summary>
        <content type="html"><![CDATA[<h1 id="使用说明">使用说明</h1>
<p>本项目仍然是使用全球最大的CDN服务商——CloudFlare提供的<code>Workers</code>。</p>
<p>下面我将告诉你们自己搭建Tiktok镜像站点的方法，以解决在天朝无法访问Tiktok的问题。</p>
<h1 id="开启workers">开启workers</h1>
<p>在控制面板主页左侧可以找到<code>workers</code>。<br>
可以将<code>workers</code>理解为cloudflare的一款proxy服务，这个服务的一大优点就是自带CDN。按照官方的说法：</p>
<blockquote>
<p>构建无服务器应用程序并在全球范围内即时部署，从而获得卓越的性能、可靠性和规模性。</p>
</blockquote>
<!--more-->
<figure data-type="image" tabindex="1"><img src="http://zigeltd.eu.org/?/images/2022/07/12/hFSjhW5lQ5/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-07-12%20191038.png" alt="找到Workers" loading="lazy"></figure>
<p>如图所示，点击<code>创建服务</code>，右侧显示每天的额度，如果只是搭建个人服务这些额度绰绰有余了。下方会显示所有已经搭建的服务。<br>
<img src="http://zigeltd.eu.org/?/images/2022/07/12/aPRxACYwDc/v2-0f300582f5820076cfad4547caca1d87_720w.jpg" alt="创建服务" loading="lazy"></p>
<p>进入<code>创建服务</code>页面后，我们要稍微配置一下这个服务名称，将他改为自己心仪的名称，<s>因为以后我们要用他访问镜像站</s>（2022年后workers.dev就被墙了）<br>
<img src="http://zigeltd.eu.org/?/images/2022/07/12/IuoDDragZw/v2-f5bdf69a578ca901215b48d881e31523_r.jpg" alt="创建函数" loading="lazy"></p>
<p>这样我们的服务就搭建好了。但是我们还需要修改代码。转到<code>控制界面</code>，可以找到右下角有一个<code>快速编辑</code>的按钮。<br>
<img src="http://zigeltd.eu.org/?/images/2022/07/12/iOQXTHdYGG/v2-5908f6e3bd67091d62fb454d6b16f21e_720w.jpg" alt="控制界面" loading="lazy"></p>
<p>左边<code>修改代码</code>，下方<code>部署</code>，右侧可以选择<code>预览窗口</code>，以及打开链接。</p>
<blockquote>
<p>一般我们就打开这个页面，把下方的代码复制进去，点击<code>保存部署</code>，然后输入链接就可以直接访问Tiktok镜像站了。<br>
<img src="http://zigeltd.eu.org/?/images/2022/07/12/3GZXvdnoYw/v2-86fe48f5e898614c4d227ea5bd4b896f_720w.jpg" alt="部署代码" loading="lazy"></p>
</blockquote>
<h1 id="代码内容">代码内容</h1>
<p>原来代码设置的是Google的镜像站，我这里改成Tiktok了。我们直接复制贴到<code>workers</code>里面即可。</p>
<pre><code>// 你要镜像的网站.
const upstream = 'www.tiktok.com'

// 镜像网站的目录，比如你想镜像某个网站的二级目录则填写二级目录的目录名，镜像 google 用不到，默认即可.
const upstream_path = '/'

// 镜像站是否有手机访问专用网址，没有则填一样的.
const upstream_mobile = 'www.tiktok.com'

// 屏蔽国家和地区.
const blocked_region = ['KP', 'SY', 'PK', 'CU']

// 屏蔽 IP 地址.
const blocked_ip_address = ['0.0.0.0', '127.0.0.1']

// 镜像站是否开启 HTTPS.
const https = true

// 文本替换.
const replace_dict = {
    '$upstream': '$custom_domain',
    '//tiktok.com': ''
}

// 以下保持默认，不要动
addEventListener('fetch', event =&gt; {
    event.respondWith(fetchAndApply(event.request));
})

async function fetchAndApply(request) {

    const region = request.headers.get('cf-ipcountry').toUpperCase();
    const ip_address = request.headers.get('cf-connecting-ip');
    const user_agent = request.headers.get('user-agent');

    let response = null;
    let url = new URL(request.url);
    let url_hostname = url.hostname;

    if (https == true) {
        url.protocol = 'https:';
    } else {
        url.protocol = 'http:';
    }

    if (await device_status(user_agent)) {
        var upstream_domain = upstream;
    } else {
        var upstream_domain = upstream_mobile;
    }

    url.host = upstream_domain;
    if (url.pathname == '/') {
        url.pathname = upstream_path;
    } else {
        url.pathname = upstream_path + url.pathname;
    }

    if (blocked_region.includes(region)) {
        response = new Response('Access denied: WorkersProxy is not available in your region yet.', {
            status: 403
        });
    } else if (blocked_ip_address.includes(ip_address)) {
        response = new Response('Access denied: Your IP address is blocked by WorkersProxy.', {
            status: 403
        });
    } else {
        let method = request.method;
        let request_headers = request.headers;
        let new_request_headers = new Headers(request_headers);

        new_request_headers.set('Host', url.hostname);
        new_request_headers.set('Referer', url.hostname);

        let original_response = await fetch(url.href, {
            method: method,
            headers: new_request_headers
        })

        let original_response_clone = original_response.clone();
        let original_text = null;
        let response_headers = original_response.headers;
        let new_response_headers = new Headers(response_headers);
        let status = original_response.status;

        new_response_headers.set('access-control-allow-origin', '*');
        new_response_headers.set('access-control-allow-credentials', true);
        new_response_headers.delete('content-security-policy');
        new_response_headers.delete('content-security-policy-report-only');
        new_response_headers.delete('clear-site-data');

        const content_type = new_response_headers.get('content-type');
        if (content_type.includes('text/html') &amp;&amp; content_type.includes('UTF-8')) {
            original_text = await replace_response_text(original_response_clone, upstream_domain, url_hostname);
        } else {
            original_text = original_response_clone.body
        }

        response = new Response(original_text, {
            status,
            headers: new_response_headers
        })
    }
    return response;
}

async function replace_response_text(response, upstream_domain, host_name) {
    let text = await response.text()

    var i, j;
    for (i in replace_dict) {
        j = replace_dict[i]
        if (i == '$upstream') {
            i = upstream_domain
        } else if (i == '$custom_domain') {
            i = host_name
        }

        if (j == '$upstream') {
            j = upstream_domain
        } else if (j == '$custom_domain') {
            j = host_name
        }

        let re = new RegExp(i, 'g')
        text = text.replace(re, j);
    }
    return text;
}


async function device_status(user_agent_info) {
    var agents = [&quot;Android&quot;, &quot;iPhone&quot;, &quot;SymbianOS&quot;, &quot;Windows Phone&quot;, &quot;iPad&quot;, &quot;iPod&quot;];
    var flag = true;
    for (var v = 0; v &lt; agents.length; v++) {
        if (user_agent_info.indexOf(agents[v]) &gt; 0) {
            flag = false;
            break;
        }
    }
    return flag;
}
</code></pre>
<h1 id="自定义域名">自定义域名</h1>
<h2 id="托管域名到cloudflare">托管域名到Cloudflare</h2>
<p>就是把自己的域名转移到CloudFlare这个很简单，到Cloudflare 主页点击<code>添加站点</code>即可托管。</p>
<h2 id="新增dns解析">新增DNS解析</h2>
<p>进入自己的域名后转到<code>DNS</code>界面，添加一条‘AAAA“DNS解析，IPv6为<code>100::</code>,最重要的是打开小黄云（即打开Cloudflare代理）<br>
![DNS解析]（http://zigeltd.eu.org/?/images/2022/07/12/5L8apau8GB/00c4d243e79aa4334a873dafe37c9396.png)</p>
<h2 id="关联域名">关联域名</h2>
<p>**进入你的域名，不是你的首页！**进入Workers，添加路由</p>
<h1 id="最终效果">最终效果</h1>
<p>现在已经无法打开Google了，显示错误（被撸爆也是很正常的吧），Github也被撸爆了。目前Tiktok还可以正常使用<br>
<img src="http://zigeltd.eu.org/?/images/2022/07/12/Fg16fPa3Ck/v2-4bcd1142c33ae15a7fbde408f73951e1_720w.jpg" alt="Google显示错误" loading="lazy"><br>
但是Tiktok还能正常访问：<br>
<img src="http://zigeltd.eu.org/?/images/2022/07/12/7x860qYeD2/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-07-12%20195612.png" alt="Tiktok" loading="lazy"></p>
<p>最后再附上我的Tiktok镜像站地址：<br>
[Tiktok- Make You Day](https://tik.zgtech.top/）</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Github 访问慢？加速访问 Github 的两种方案，简单粗暴]]></title>
        <id>https://lzh2665692.github.io/post/github cdn</id>
        <link href="https://lzh2665692.github.io/post/github cdn">
        </link>
        <updated>2022-07-12T03:50:19.000Z</updated>
        <summary type="html"><![CDATA[<p>Github 有很多优质资源，甚至有些开源免费的资源，比付费的还好用。我不是经常会贴一些 Github 的链接，但贴的链接，有些人反应打不开。</p>
<p>今天我就分享几个常用的打开Github的方法：</p>
<h1 id="修改本机的host文件">修改本机的host文件</h1>
<h2 id="原理">原理</h2>
<p>像 Github 这种国际性大公司，肯定全球各个国家都部署了服务，虽然全球不同国家的用户都是访问同一个域名 ，比如，日本和美国的网友都访问 github.com，但背后访问的服务器不是同一个，为了提高访问速度，肯定优先访问本地服务器的服务。日本访问日本节点的服务器，美国访问美国节点的服务器。</p>
<p>本来访问Github就如同其他网页一样正常，但是Github在中国没有服务器，所以中国网友访问 github.com 就会解析到国外。由于众所周知的原因，GFW就把 github.com 给墙了</p>
]]></summary>
        <content type="html"><![CDATA[<p>Github 有很多优质资源，甚至有些开源免费的资源，比付费的还好用。我不是经常会贴一些 Github 的链接，但贴的链接，有些人反应打不开。</p>
<p>今天我就分享几个常用的打开Github的方法：</p>
<h1 id="修改本机的host文件">修改本机的host文件</h1>
<h2 id="原理">原理</h2>
<p>像 Github 这种国际性大公司，肯定全球各个国家都部署了服务，虽然全球不同国家的用户都是访问同一个域名 ，比如，日本和美国的网友都访问 github.com，但背后访问的服务器不是同一个，为了提高访问速度，肯定优先访问本地服务器的服务。日本访问日本节点的服务器，美国访问美国节点的服务器。</p>
<p>本来访问Github就如同其他网页一样正常，但是Github在中国没有服务器，所以中国网友访问 github.com 就会解析到国外。由于众所周知的原因，GFW就把 github.com 给墙了</p>
<!--more-->
<p>这里实现的方式就是利用 DNS解析服务器，这个DNS解析服务器相当一个中间件一样，记录这域名和 IP 的映射关系。</p>
<p>但除了中国以外的国家还有很多，我们可以挑选一些离我们近的国家，访问 Github 部署在他们国家的服务器，这样就能够正常访问啦~</p>
<h2 id="开始操作">开始操作</h2>
<h3 id="找cdn节点">找CDN节点</h3>
<p>第一步不用我们做了，有网友维护了 Github 全新、优秀的节点。当然，这个作者也将它们开源到 [Github 520]（https://github.com/521xueweihan/GitHub520）。<br>
<img src="http://zigeltd.eu.org/?/images/2022/07/12/DTYttAG8iY/image-20220604204900211.png" alt="Github 520" loading="lazy"></p>
<h3 id="复制节点内容">复制节点内容</h3>
<pre><code># GitHub520 Host Start
140.82.112.25                 alive.github.com
140.82.112.25                 live.github.com
185.199.108.154               github.githubassets.com
140.82.114.21                 central.github.com
185.199.108.133               desktop.githubusercontent.com
185.199.108.153               assets-cdn.github.com
185.199.108.133               camo.githubusercontent.com
185.199.108.133               github.map.fastly.net
199.232.69.194                github.global.ssl.fastly.net
140.82.112.4                  gist.github.com
185.199.108.153               github.io
140.82.113.3                  github.com
192.0.66.2                    github.blog
140.82.114.5                  api.github.com
185.199.108.133               raw.githubusercontent.com
185.199.108.133               user-images.githubusercontent.com
185.199.108.133               favicons.githubusercontent.com
185.199.108.133               avatars5.githubusercontent.com
185.199.108.133               avatars4.githubusercontent.com
185.199.108.133               avatars3.githubusercontent.com
185.199.108.133               avatars2.githubusercontent.com
185.199.108.133               avatars1.githubusercontent.com
185.199.108.133               avatars0.githubusercontent.com
185.199.108.133               avatars.githubusercontent.com
140.82.114.9                  codeload.github.com
54.231.200.129                github-cloud.s3.amazonaws.com
52.217.33.196                 github-com.s3.amazonaws.com
52.216.93.147                 github-production-release-asset-2e65be.s3.amazonaws.com
52.216.93.147                 github-production-user-asset-6210df.s3.amazonaws.com
52.217.207.33                 github-production-repository-file-5c1aeb.s3.amazonaws.com
185.199.108.153               githubstatus.com
64.71.144.211                 github.community
23.100.27.125                 github.dev
140.82.113.21                 collector.github.com
13.107.42.16                  pipelines.actions.githubusercontent.com
185.199.108.133               media.githubusercontent.com
185.199.108.133               cloud.githubusercontent.com
185.199.108.133               objects.githubusercontent.com
</code></pre>
<h3 id="找到并修改电脑上-hosts文件">找到并修改电脑上 hosts文件</h3>
<p>Windows：<code>C:\Windows\System32\drivers\etc\hosts</code></p>
<p>Mac：<code>/etc/hosts</code><br>
接着以<code>管理员身份</code>用<code>文本编辑器</code>打开<code>hosts 文件</code>，并将上面 Github 520 的<code>节点内容</code>都复制粘贴到<code>最后面</code>。</p>
<h3 id="刷新dns缓存">刷新DNS缓存</h3>
<p>使用 CMD 打开 DOSS 界面，输入命令：<br>
Windows：<code>ipconfig /flushdns</code><br>
Mac os：<code>sudo killall -HUP mDNSResponder</code><br>
OK，各位可以再打开 <a href="https://www.github.com/">Github</a> 看看，是否可以正常访问Github了</p>
<h1 id="dev-sidecar">dev-sidecar(）</h1>
<p>第二种方案更加简单，只要下载软件就行了。这个项目叫 <a href="https://github.com/docmirror/dev-sidecar/releases">开发者边车辅助工具</a>，解决 Github 打不开、用户头像无法加载、releases 无法上传下载、git-clone、git-pull、git-push.git.exe 失败等问题。</p>
<p>在[下载页面]（https://github.com/docmirror/dev-sidecar/releases)下载对应你操作系统的软件，支持 Mac、Windows、Linux。<br>
下载解压到本地，双击打开。安装即可</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[使用Github Pages和Gridea搭建个人博客]]></title>
        <id>https://lzh2665692.github.io/post/github-gridea</id>
        <link href="https://lzh2665692.github.io/post/github-gridea">
        </link>
        <updated>2022-07-10T09:02:34.000Z</updated>
        <summary type="html"><![CDATA[<p>之前我写过一个关于如何使用Hexo博客系统搭建静态博客的博文：<a href="https://www.zigecn.eu.org/9b2b00ac.html">博客原文</a></p>
<p>有同学跟我说像Hexo这样的静态博客使用不方便，因为需要熟悉Git命令，对非计算机专业同学来说很不友好，增加了其学习成本。<br>
不过我后来又发现了一个超级棒的静态博客写作客户端——Gridea。即使是非计算机同学，也能愉快地构建并管理博客。</p>
<p>本文，我就来教大家如何来使用Github Pages和Gridea来搭建个人博客~</p>
<h1 id="关于github-pages">关于Github Pages</h1>
<p>官方文档：</p>
<blockquote>
<p>GitHub Pages 是一项静态站点托管服务，它直接从 GitHub 上的仓库获取 HTML、CSS 和 JavaScript 文件，（可选）通过构建过程运行文件，然后发布网站。</p>
</blockquote>
]]></summary>
        <content type="html"><![CDATA[<p>之前我写过一个关于如何使用Hexo博客系统搭建静态博客的博文：<a href="https://www.zigecn.eu.org/9b2b00ac.html">博客原文</a></p>
<p>有同学跟我说像Hexo这样的静态博客使用不方便，因为需要熟悉Git命令，对非计算机专业同学来说很不友好，增加了其学习成本。<br>
不过我后来又发现了一个超级棒的静态博客写作客户端——Gridea。即使是非计算机同学，也能愉快地构建并管理博客。</p>
<p>本文，我就来教大家如何来使用Github Pages和Gridea来搭建个人博客~</p>
<h1 id="关于github-pages">关于Github Pages</h1>
<p>官方文档：</p>
<blockquote>
<p>GitHub Pages 是一项静态站点托管服务，它直接从 GitHub 上的仓库获取 HTML、CSS 和 JavaScript 文件，（可选）通过构建过程运行文件，然后发布网站。</p>
</blockquote>
<!--more-->
<p>emmm，总之，GitHub Pages会发布您推送到代码仓库的任何静态文件，你可以创建自己的静态文件或使用静态站点生成器（如Hexo）为你构建站点，然后就可以使用【用户名】.github.io域名访问你的博客网站了。<br>
对了，是免费的哦~</p>
<h1 id="关于gridea">关于Gridea</h1>
<p>官方文档：</p>
<blockquote>
<p>Gridea 是一个静态博客写作客户端，帮助你更容易地构建并管理博客或任何静态站点。</p>
</blockquote>
<p><a href="https://gridea.dev/">Gridea</a>的方便就在于可以使用客户端直接编写代码，然后只要点击按钮就能发布，非常人性化。重要的是，其提供了Windows、Mac OS和Linux三种操作系统的客户端。Gridea的界面是这样的：<br>
<img src="https://pic3.zhimg.com/80/v2-700a119278166a70b2d352abe7c70d9e_720w.jpg" alt="Gridea" title="Gridea" loading="lazy"><br>
怎么样？是不是非常小清新？是不是迫不及待地想要开始了？！</p>
<h1 id="开始部署">开始部署</h1>
<h2 id="1注册github账号">1.注册Github账号</h2>
<p>先去全球最大的同性恋交流平台——<a href="https://www.github.com/">Github</a>上注册一个账号，登录。</p>
<h2 id="2创建仓库token">2.创建仓库token</h2>
<p>登录后，先进入<a href="https://github.com/settings/tokens/new">创建token</a>的页面，然后填写Note（相当于是个提示吧，因为你可能有多个token，便于区分用途），勾上repo即可，往下拉点Generate token。<br>
<img src="https://pic2.zhimg.com/80/v2-fa7f773e1925f1289bea9d53cc7aa20d_720w.jpg" alt="创建仓库token" title="创建仓库token" loading="lazy"><br>
然后点这个图标先复制，先保存起来吧，不然你下次再点开就看不到了，得重新生成<br>
<img src="https://pic3.zhimg.com/80/v2-8ea52e82214c58feed2958471add7c56_720w.jpg" alt="复制仓库token" title="复制仓库token" loading="lazy"></p>
<h2 id="3-创建公共仓库">3 创建公共仓库</h2>
<p>点击右上角头像左边的+号，然后选择<code>New repository</code>。<br>
<img src="https://pic1.zhimg.com/80/v2-c28e327d193e1d1cfe071519fcbf50c8_720w.jpg" alt="创建公共仓库" title="创建公共仓库" loading="lazy"></p>
<p>填写好信息，点下面的<code>Create repository</code>。</p>
<blockquote>
<p>注意：Repository name填【你的用户名】./github.io，Description可选填。<br>
<img src="https://pic3.zhimg.com/80/v2-98e889c5e83fdf57878aa8b4177bee42_720w.jpg" alt="创建公共仓库" title="创建公共仓库" loading="lazy"><br>
创建成功后，就是只有一个只有README.md的仓库，这时你就可以在浏览器访问【你的用户名】.github.io，可以看到内容，就可以了。</p>
</blockquote>
<h1 id="运行gridea">运行Gridea</h1>
<p>去<a href="https://gridea.dev/">Gridea官网</a>下载你操作系统对应的安装包，安装，运行。第一次使用要进行配置，点击<code>远程</code>进行配置。<br>
<img src="https://pic4.zhimg.com/80/v2-da2e52949c2d435919ead1bb8dde4c03_720w.jpg" alt="Gridea配置" title="Gridea配置" loading="lazy"></p>
<blockquote>
<p>平台要选<code>Github Pages</code>，域名和仓库名称填Github的仓库名，分支填<code>main</code>（原先的<code>master</code>有争议，现在已全面改为<code>main</code>），令牌就是刚刚要你复制的token。另外你要绑定域名的话，CNAME就填你的域名。<br>
如果你不会自定义域名的话，请参考这篇博客：<a href="https://www.zigecn.eu.org/9b2b00ac.html">使用Hexo+Github搭建博客，并自定义域名</a></p>
</blockquote>
<p>填写完成后，点<code>保存</code>，然后检测一下<code>远程连接</code>，没问题的话就点左下角的<code>同步</code>。<br>
这样你就可以访问<code>xxx.github.io</code>来打开你的博客网站了，如果你设置了CNAME，就是访问你的域名。文章的管理就可以直接在这个客户端上操作，同时也可以选择你喜欢的主题，自己多去研究研究吧，哈哈。另外，附上一些答疑。</p>
<p>大家可以看到，我写的这个教程主要是发的截图，并没有写一行代码，这就是使用Gridea客户端的好处。</p>
<p>OK，接下来你就自己去折腾你的博客吧~，有问题敬请评论。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Github Pages+Hexo 搭建静态博客]]></title>
        <id>https://lzh2665692.github.io/post/github-hexo</id>
        <link href="https://lzh2665692.github.io/post/github-hexo">
        </link>
        <updated>2022-07-10T02:51:46.000Z</updated>
        <summary type="html"><![CDATA[<h1 id="一准备工作">一：准备工作</h1>
<h2 id="1-下载nodejs并进行安装详见注意事项">1、下载<a href="https://nodejs.org/en/">Node.js</a>，并进行安装（详见注意事项）</h2>
<blockquote>
<p>1.双击打开安装包<br>
2.疯狂点击下一步进行安装</p>
</blockquote>
<h2 id="2-下载git并进行安装">2、下载<a href="https://git-scm.com/">Git</a>，并进行安装</h2>
<blockquote>
<p>依旧按照上述步骤进行安装</p>
</blockquote>
]]></summary>
        <content type="html"><![CDATA[<h1 id="一准备工作">一：准备工作</h1>
<h2 id="1-下载nodejs并进行安装详见注意事项">1、下载<a href="https://nodejs.org/en/">Node.js</a>，并进行安装（详见注意事项）</h2>
<blockquote>
<p>1.双击打开安装包<br>
2.疯狂点击下一步进行安装</p>
</blockquote>
<h2 id="2-下载git并进行安装">2、下载<a href="https://git-scm.com/">Git</a>，并进行安装</h2>
<blockquote>
<p>依旧按照上述步骤进行安装</p>
</blockquote>
<!-- more -->
<h1 id="二-启用github-pages">二、启用Github Pages</h1>
<h2 id="申请github账号">申请<a href="https://www.github.com">github</a>账号</h2>
<p>这里xxx填写你的github账户名称。如图：<br>
<img src="https://pic1.zhimg.com/80/v2-a761fd5075def14d3d4f86f79ac96e00_720w.jpg" alt=" _config.yml 文件" loading="lazy"><br>
<img src="https://pic4.zhimg.com/80/v2-92c1ec388326d59f35cadb260543896f_720w.jpg" alt=" _config.yml 文件" loading="lazy"></p>
<h2 id="创建一个新的仓库">创建一个新的仓库</h2>
<p>命名为【你的用户名】.github.io<br>
<img src="https://pic1.zhimg.com/80/v2-a6e50750d8df0d0a4ef24a5229300140_720w.jpg" alt="示例" loading="lazy"><br>
<img src="https://pic2.zhimg.com/80/v2-d8c2ec23f78635dcf9873c202f8aebdd_720w.jpg" alt="示例" loading="lazy"></p>
<h1 id="三-安装hexo">三、安装Hexo</h1>
<ul>
<li>打开<code>Node.js</code>下的<code>command prompt</code>面板，分别输入以下命令（检测软件配置是否安装成功）</li>
</ul>
<blockquote>
<p>输出了版本号，那么证明配置成功<br>
如果没有版本号，请重新安装node.js，检查是否勾选Add to Path，或者手动为node.js添加环境变量</p>
</blockquote>
<pre><code>node -v
npm -v
</code></pre>
<ul>
<li>安装hexo和hexo服务器模块</li>
</ul>
<pre><code>npm install hexo-cli -g
npm install hexo-server --save
</code></pre>
<ul>
<li>生成博客文件夹</li>
</ul>
<blockquote>
<p>直接在自己心仪的路径上右键生成文件夹，名称随意<br>
例如： D:\hexo</p>
</blockquote>
<ul>
<li>
<p>切换command prompt的目录到新建的hexo文件路径，命令如下<br>
<code>cd D:\hexo</code></p>
</li>
<li>
<p>执行<code>hexo init</code>命令，进行博客初始化</p>
</li>
<li>
<p>测试hexo是否安装成功：</p>
</li>
</ul>
<pre><code>hexo new test
hexo clean
hexo s
hexo g
hexo d
</code></pre>
<blockquote>
<p>其中hexo new test表示新建一篇名为test的博文，hexo g表示生成，是hexo generate的简写，hexo s在本地运行hexo服务器，是hexo server的简写。<br>
成功后会有如下提示，进入 http://localhost:4000 即可看到刚刚生成的网页<br>
<img src="https://pic1.zhimg.com/80/v2-813612ad36af17b81ca742b8396e9564_720w.jpg" alt="Hexo 示例" title="Hexo 示例" loading="lazy"><br>
以下为配置完成后的样子，可能和你生成的页面不同，如果想配置和我一样的hexo可以继续阅读我的其他post。</p>
</blockquote>
<h1 id="三-配置到github-pages">三、配置到Github Pages</h1>
<p>之前的操作只是在本地实现了我们的博客，如何推送到github pages呢？</p>
<ul>
<li>
<p>首先，打开博客目录下的 _config.yml 文件<br>
<img src="http://www2.zgtech.top/?/images/2022/07/09/7o1Ak1pvEy/Hexo%20%E7%A4%BA%E4%BE%8B.png" alt=" _config.yml 文件" title="_config.yml 文件" loading="lazy"></p>
</li>
<li>
<p>使用 ctrl+f 搜索deploy，并添加以下代码。注意！把xxx改为之前在github配置的名字即可。</p>
</li>
</ul>
<pre><code>deploy:
- type: git
 repo: https://github.com/xxx/xxx.github.io.git
 branch: master
</code></pre>
<ul>
<li>
<p>接下来，安装<code>hexo-deployer-git</code>插件<br>
<code>npm install hexo-deployer-git --save</code></p>
</li>
<li>
<p>最后就可以推送我们的网页到github啦！</p>
</li>
</ul>
<pre><code> hexo g 
 hexo d
</code></pre>
<h1 id="四-完善">四、完善</h1>
<h2 id="访问网页">访问网页</h2>
<p>如果之前的步骤都是正确的话，那么恭喜你！你已经可以访问你的网页了！</p>
<p>比如我的网页： <a href="https://zigetech.github.io">zigetech.github.io</a></p>
<p>把zigetech改成你的github用户名即可</p>
<h2 id="绑定你自己的域名可选">绑定你自己的域名（可选）</h2>
<ul>
<li>如果你已经拥有你自己的域名的话那是最好，如果你想购买一个域名，可以去<a href="https://dnspod.cloud.tencent.com/">腾讯云</a>，购买。<br>
如果你不想花钱还想（<s>白嫖</s>）用自定义域名的的话，可以参考我的另一篇<a href="https://www.zigecn.eu.org/65fc21bd.html">博文</a>进行申请。</li>
</ul>
<p>由于我的域名使用的是<a href="https://dash.cloudflare.com/8082e5ab771bb1a1c2b3fa66c1248a59">Cloudflare</a>，接下来我会演示如何绑定你的github pages到Cloudflare，其他域名商操作应该也是雷同的。</p>
<ul>
<li>
<p>登录你的Cloudflare后台，点击<code>DNS</code>.添加一条CNAME记录，如图：<br>
<img src="http://www2.zgtech.top/?/images/2022/07/09/eZjlLhU2Fm/DNS%E8%A7%A3%E6%9E%90.png" alt="DNS解析" loading="lazy"></p>
</li>
<li>
<p>其中CNAME的值就填写你的github page的值（也就是上文你注册过的仓库的名字），<br>
![DNS解析](https://pic2.zhimg.com/80/v2-214e0d6b077b908c1dd9adc044996505_720w.jpg “DNS解析”)</p>
</li>
<li>
<p>最后一步，在你本地 /source 文件夹下添加一个名为CNAME的文件（注意，此文件没有后缀），在文件中里面写上你的域名即可。<br>
<img src="http://www2.zgtech.top/?/images/2022/07/09/INCvyI6930/CNAME%E6%96%87%E4%BB%B6%E5%A1%AB%E5%86%99.png" alt="CNAME文件填写" loading="lazy"></p>
</li>
<li>
<p>再次执行deploy</p>
</li>
</ul>
<pre><code> hexo g 
 hexo d
</code></pre>
<ul>
<li>稍等几分钟，你就可以用自己的域名访问你的网站啦！<br>
<img src="http://www2.zgtech.top/?/images/2022/07/09/GbOwqJJfx6/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2.png" alt="我的博客" loading="lazy"></li>
</ul>
<h1 id="最后的最后">最后的最后</h1>
<p>本文介绍了基本的hexo + github page的部署及实现，如果有任何问题，欢迎留言！</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[这里是子哥の小破站]]></title>
        <id>https://lzh2665692.github.io/post/zhe-li-shi-zi-ge-noxiao-po-zhan</id>
        <link href="https://lzh2665692.github.io/post/zhe-li-shi-zi-ge-noxiao-po-zhan">
        </link>
        <updated>2022-07-10T01:53:03.000Z</updated>
        <summary type="html"><![CDATA[<h1 id="你好鸭我是子哥-~">你好鸭，我是子哥 ~</h1>
<h2 id="我一个啥也不懂的小白终于花了两天时间搭建了我的个人博客由-hexo-强力驱动使用-ayer-作为主题"><img src="https://raw.githubusercontent.com/lzh2665692/image/master/zige.jpg" alt="blockchain" title="区块链" loading="lazy"><br>
我，一个啥也不懂的小白，终于花了两天时间，搭建了我的个人博客，由 <strong>Hexo</strong> 强力驱动，使用 <a href="https://github.com/Shen-Yu/hexo-theme-ayer">Ayer</a> 作为主题。</h2>
<p>下面，我想记录一下我的折腾历程~</p>
]]></summary>
        <content type="html"><![CDATA[<h1 id="你好鸭我是子哥-~">你好鸭，我是子哥 ~</h1>
<h2 id="我一个啥也不懂的小白终于花了两天时间搭建了我的个人博客由-hexo-强力驱动使用-ayer-作为主题"><img src="https://raw.githubusercontent.com/lzh2665692/image/master/zige.jpg" alt="blockchain" title="区块链" loading="lazy"><br>
我，一个啥也不懂的小白，终于花了两天时间，搭建了我的个人博客，由 <strong>Hexo</strong> 强力驱动，使用 <a href="https://github.com/Shen-Yu/hexo-theme-ayer">Ayer</a> 作为主题。</h2>
<p>下面，我想记录一下我的折腾历程~</p>
<!--more-->
<h1 id="起因">起因</h1>
<p>其实我早就有建站的想法了，但是我清楚地认识到一个事实，那就是<strong>我只会用Wordpress</strong>。<br>
举个例子：我们班上有个技术大佬——段某（我这次构建博客也找他交流过技术），在听说我不会 HTML 之后，是这样说的：</p>
<blockquote>
<p>html，这东西狗都会</p>
</blockquote>
<h2 id="好家伙合着我应该是还没出生">好家伙，合着我应该是<strong>还没出生</strong>？！</h2>
<p>于对我技术能力的自知之明，因此建站这事儿我都准备放在高中再研究了。<br>
后来有天，段某有了一个 Hexo 博客：https://testgifts.tech/<br>
很快啊，我啪的一下就点进去了，看上去很漂亮~<br>
<img src="https://i.loli.net/2021/07/18/O6ugHvdFcoNwDaT.png" alt="段某的博客" title="段某的博客" loading="lazy"></p>
<blockquote>
<p>截图上是他已经切换到 Typecho 的网页。<br>
所以呢，我萌生了做个博客的想法。但也只是“想法”而已。至少在我的固有思维中，建一个个人博客，是一件很麻烦的事情。<br>
不过这两天我放假了。尽管高二升高三的暑假很短，但我想趁这段时间试试。一试才知道，搭建个 Hexo 博客<strong>非常简单</strong>。</p>
</blockquote>
<h1 id="尾声">尾声</h1>
<p>这个暑假我会更新各种技巧，敬请期待。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[SSL证书为什么价格差距那么大？哪款SSL证书的性价比高?]]></title>
        <id>https://lzh2665692.github.io/post/ssl</id>
        <link href="https://lzh2665692.github.io/post/ssl">
        </link>
        <updated>2022-07-10T01:51:36.000Z</updated>
        <summary type="html"><![CDATA[<p><a href="https://baike.baidu.com/item/SSL%E8%AF%81%E4%B9%A6/5201468">SSL证书</a>市场品牌和种类众多，用户在选择证书的时候，也能随心所欲的购买到心仪的证书品牌类型。<br>
但是也有不少用户在选购的时候，也不禁有疑问：不同的证书品牌和类型为什么价格相差如此之大？</p>
<p>确实，有的证书很便宜，甚至是免费使用，但是有的证书价格却高的出奇。出现这样情况的原因主要是由于品牌和证书类型，以及证书的售后服务方面的原因导致的。</p>
<h1 id="证书价格差异大的原因">证书价格差异大的原因</h1>
]]></summary>
        <content type="html"><![CDATA[<p><a href="https://baike.baidu.com/item/SSL%E8%AF%81%E4%B9%A6/5201468">SSL证书</a>市场品牌和种类众多，用户在选择证书的时候，也能随心所欲的购买到心仪的证书品牌类型。<br>
但是也有不少用户在选购的时候，也不禁有疑问：不同的证书品牌和类型为什么价格相差如此之大？</p>
<p>确实，有的证书很便宜，甚至是免费使用，但是有的证书价格却高的出奇。出现这样情况的原因主要是由于品牌和证书类型，以及证书的售后服务方面的原因导致的。</p>
<h1 id="证书价格差异大的原因">证书价格差异大的原因</h1>
<!--more-->
<h2 id="1-证书品牌不同">1、证书品牌不同</h2>
<p>不同品牌的SSL证书在价格上差距较大，主要是因为证书的产品质量有所区别。部分大品牌证书厂商证书签发历史悠久，对产品有较强的专业研究，安全保密性有保障。<br>
同时产品的兼容性等也较好，对目前市场上的主流浏览器有良好的兼容性，用户在安装部署后浏览器地址栏都会显示地址是安全提示。</p>
<h2 id="2-证书类型不同">2、证书类型不同</h2>
<p>DV、OV、EV是目前使用较多的SSL证书类型，其中DV证书的签发验证流程最为简单，用户在申请的时候仅验证域名信息，签发速度快，价格是这三类证书中最低的。<br>
OV和EV证书验证流程则是相对复杂些，相较于DV证书，增加了人工核验环节，严谨性可以得到保证。<br>
另外，EV证书在部署安装后，在浏览器的地址栏会显示用户公司的名称信息，网站的可信度进一步提升。验证流程的严谨和功能的多样化使得EV证书成为这几种证书中价格价格最高的。</p>
<p>除此之外，每种证书类型根据域名数量的不同，价格也会有区别。保护单域名的价格较低，而保护多域名和通配符价格较高。</p>
<h2 id="3-售后保障不同">3、售后保障不同</h2>
<p>从经济学角度来说，证书也属于商品。而在市场经济活动中，所有商品在出售以后，难免会涉及售后的问题。</p>
<p>SSL证书特别之处在于，它是用来保护用户的数据信息安全，一旦出现问题给客户造成的损失难以预估。所以，售后保障也是各大证书厂商极为重视的问题。<br>
一些价格较高的证书品牌，证书厂商都已经为其投入了高额的赔付保障，真正能做到让用户售后无忧。</p>
<h1 id="常见的证书价格">常见的证书价格</h1>
<p>这里从腾讯云官网里找到了一些SSL证书的价格，均指首年价格，后续订阅的价格得花更多的钱。</p>
<table>
<thead>
<tr>
<th style="text-align:right">证书品牌</th>
<th style="text-align:right">支持域名</th>
<th style="text-align:right">证书型号</th>
<th style="text-align:right">单价</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:right">DNSPod</td>
<td style="text-align:right">单个域名</td>
<td style="text-align:right">域名型（DV）SSL 证书</td>
<td style="text-align:right">560元/年</td>
</tr>
<tr>
<td style="text-align:right">SecureSite</td>
<td style="text-align:right">单个域名</td>
<td style="text-align:right">企业型（OV）SSL 证书</td>
<td style="text-align:right">5000元/年</td>
</tr>
<tr>
<td style="text-align:right">GeoTrust</td>
<td style="text-align:right">单个域名</td>
<td style="text-align:right">企业型（OV）SSL 证书</td>
<td style="text-align:right">2850元/年</td>
</tr>
<tr>
<td style="text-align:right">GlobalSign</td>
<td style="text-align:right">单个域名</td>
<td style="text-align:right">企业型（OV）SSL 证书</td>
<td style="text-align:right">3728元/年</td>
</tr>
<tr>
<td style="text-align:right">WoTrus</td>
<td style="text-align:right">单个域名</td>
<td style="text-align:right">域名型（DV）SSL 证书</td>
<td style="text-align:right">488元/年</td>
</tr>
<tr>
<td style="text-align:right">DNSPod（SM2）</td>
<td style="text-align:right">单个域名</td>
<td style="text-align:right">域名型（DV）SSL 证书</td>
<td style="text-align:right">880元/年</td>
</tr>
</tbody>
</table>
<p>总之，对我这个草根站长来说，就是“买不起，真的买不起”。</p>
<h1 id="非常良心国产ssl品牌lets-encrypt">非常良心国产SSL品牌——<a href="https://www.mianfeissl.com/">Let's Encrypt</a></h1>
<p>Let's Encrypt目前已基于全球可信根，创新推出全新一代可自动化部署的自主品牌SSL证书。推出了90天的试用，并且可以无限续签。<br>
这对喜欢白嫖的草根站长来说就很好了。<br>
<img src="http://www2.zgtech.top/?/images/2022/07/09/yRkU5eGFT2/Let%27s%20Encrypt.png" alt="Let's Encrypt" loading="lazy"></p>
<p>免费版的包括<code>单域名证书</code>、<code>通配符证书</code>、<code>多域名证书</code>。<br>
<img src="http://www2.zgtech.top/?/images/2022/07/09/VkwNPVrw43/Let%27s%20Encrypt2.png" alt="Let's Encrypt" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Office 365 E5 账号申请及永久续期教程]]></title>
        <id>https://lzh2665692.github.io/post/office</id>
        <link href="https://lzh2665692.github.io/post/office">
        </link>
        <updated>2022-07-09T08:36:12.000Z</updated>
        <summary type="html"><![CDATA[<blockquote>
<p>续订成功通知<br>
<img src="http://pdsqzlt.tk/zz.jpg" alt="续订成功" title="续订成功" loading="lazy"></p>
</blockquote>
]]></summary>
        <content type="html"><![CDATA[<blockquote>
<p>续订成功通知<br>
<img src="http://pdsqzlt.tk/zz.jpg" alt="续订成功" title="续订成功" loading="lazy"></p>
</blockquote>
<!--more-->
<h1 id="申请步骤"><strong>申请步骤</strong></h1>
<p>1.访问申请链接（链接在文末或评论区给出），点击立即加入开始申请账号<br>
<img src="https://pic3.zhimg.com/80/v2-c34764ebd92153570bd0a490ece3a536_720w.jpg" alt="1.1" title="1.1" loading="lazy"></p>
<p>2.登录账号<br>
<img src="https://pic4.zhimg.com/80/v2-6f06aa42431667f523e24b83af18aa9f_720w.jpg" alt="1.2" title="1.2" loading="lazy"></p>
<p>3.注册Office 365 开发人员。下面两个勾选可以只勾选第一个，减少广告，点击下一步继续<br>
<img src="https://pic2.zhimg.com/80/v2-8cb2d3c57c22f542eba58a01210dc165_720w.jpg" alt="1.3" title="1.3" loading="lazy"></p>
<p>4.随便填一下，点击加入(最好全选）<br>
<img src="https://pic4.zhimg.com/80/v2-e51daf2827925a9073e59cc65220de97_720w.jpg" alt="1.4" title="1.4" loading="lazy"></p>
<p>5.之后的页面中会提示你没有订阅，点击申请一个订阅。在弹出的页面中输入一个你能记得住的用户名和域，然后记住你的&quot;用户名@域.onmicrosoft.com&quot;，点继续。<br>
<img src="https://pic3.zhimg.com/80/v2-22ebe2256bc71ed47a0a9cd7e7686e4a_720w.jpg" alt="1.5" title="1.5" loading="lazy"></p>
<p>6.验证手机号，这一步会调用谷歌的验证系统，准备好上网工具<br>
<img src="https://pic2.zhimg.com/80/v2-d4ddf2e1aedc6df0311567b8063a5669_720w.jpg" alt="1.6" title="1.6" loading="lazy"></p>
<p>7.现在，我们已经申请好了E5订阅了，并一次性申请了25个用户许可证。如果你只是自己用，现在已经可以使用&quot;用户名@域.onmicrosoft.com&quot;和之前设置的密码登录你电脑上的Office了。<br>
<img src="https://pic4.zhimg.com/80/v2-7c448e8c00883abfdf8cf7e925cb12c3_720w.jpg" alt="1.7" title="1.7" loading="lazy"></p>
<h1 id="分配账号与安装365"><strong>分配账号与安装365</strong></h1>
<p>之前说过E5订阅有25个用户许可证，我们可以点击转到订阅或者登录 <a href="https://www.office.com/?auth=2">官网</a> 分配账号给自己的朋友<br>
这里一定要加上 <code>?auth=2</code> ，否则会进入「个人版」office365的登录界面，无法使用这里的「组织账号」登录<br>
点击<code>安装office</code>可以安装office365，默认会安装所有的软件。若有自定义的需求，可以使用office tool plus安装。<br>
<img src="https://pic3.zhimg.com/80/v2-845aa0f5cabe542d1a98ef646fc20aa6_720w.jpg" alt="2.1" title="2.1" loading="lazy"></p>
<p>点击下方的<code>管理</code>可以分配账号，进入新页面点击<code>用户</code>——<code>活跃用户</code>——<code>添加用户</code>即可。</p>
<h1 id="设置5t网盘容量"><strong>设置5T网盘容量</strong></h1>
<p>默认onedrive容量是1T，但是可以通过设置更改为5T。</p>
<p>1.点击365主页的onedrive图标，若提示“我们目前还在 OneDrive 上设置文件”可以先跳过本步骤，先完成下面的操作。<br>
2.打开 <a href="https://admin.onedrive.com/?v=StorageSettings">官网</a> ，也可以在<code>管理中心</code>——<code>所有管理中心</code>——<code>onedrive</code>中找到，更改默认存储为5012GB。<br>
<img src="https://pic2.zhimg.com/80/v2-bee194f150eefdd27e1982998c9a038d_720w.jpg" alt="3.1" title="3.1" loading="lazy"></p>
<h1 id="无限续期私人网盘"><strong>无限续期+私人网盘</strong></h1>
<p>1、进入网站<br>
<a href="https://blog.csdn.net/qq_33212020/article/details/119747634">MS365 E5 Renew X 官方文档</a><br>
2.根据官网文档进行配置</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[免费申请EU.org顶级域名]]></title>
        <id>https://lzh2665692.github.io/post/free domin</id>
        <link href="https://lzh2665692.github.io/post/free domin">
        </link>
        <updated>2022-07-09T08:34:56.000Z</updated>
        <summary type="html"><![CDATA[<h1 id="介绍">介绍</h1>
<p>“EU.org, free domain names since 1996”，至今已有二十多年的历史。<br>
eu.org是欧盟组织下面的域名，EU代表欧盟，Paul Mockapetris在1996年的9-10月份创建了这个域名的DNS服务器。<br>
现在对个人和组织（没见提是不是非盈利性）是免费注册的。貌似cloudflare，hstspreload.org 等大公司认可为顶级域名。</p>
]]></summary>
        <content type="html"><![CDATA[<h1 id="介绍">介绍</h1>
<p>“EU.org, free domain names since 1996”，至今已有二十多年的历史。<br>
eu.org是欧盟组织下面的域名，EU代表欧盟，Paul Mockapetris在1996年的9-10月份创建了这个域名的DNS服务器。<br>
现在对个人和组织（没见提是不是非盈利性）是免费注册的。貌似cloudflare，hstspreload.org 等大公司认可为顶级域名。</p>
<!--more-->
<h1 id="申请过程">申请过程</h1>
<p>1、打开申请页面 https://nic.eu.org/arf/ 注册账号<br>
<img src="https://raw.githubusercontent.com/qiantigers/onetu/master/20210107181606.png" alt="注册账号" title="注册账号" loading="lazy"></p>
<p>2、尽量如实地填写资料，可以参考一下我是怎么写的。<br>
<img src="https://raw.githubusercontent.com/qiantigers/onetu/master/20210107181750.png" alt="填写资料" title="填写资料" loading="lazy"></p>
<p>3、登录，用户名在你的邮件里<br>
<img src="https://raw.githubusercontent.com/qiantigers/onetu/master/20210107182311.png" alt="登录" title="登录" loading="lazy"></p>
<p>4、注册你想要的域名<br>
<img src="https://raw.githubusercontent.com/qiantigers/onetu/master/20210107182530.png" alt="注册" title="注册" loading="lazy"></p>
<p>5、填入相关的域名信息<br>
(1)输入完整的域名，我输入的是zigecn.eu.org，前缀&gt;=4。当然，域名不仅仅是eu.org，更多详情可以看这个链接 👉 <a href="https://nic.eu.org/opendomains.html">域名列表</a></p>
<p>(2)需要进行DNS解析，在这里我使用的是<a href="https://www.cloudns.net/">clouDNS</a>。<br>
<img src="https://cdn.jsdelivr.net/gh/qiantigers/onetu/20210107184308.png" alt="DNS解析" title="DNS解析" loading="lazy"><br>
<img src="https://cdn.jsdelivr.net/gh/qiantigers/onetu/20210107185405.png" alt="DNS解析" title="DNS解析" loading="lazy"></p>
<p>6、信息检查，如果出现“Done”的字眼，则表明成功。<br>
<img src="https://cdn.jsdelivr.net/gh/qiantigers/onetu/20210107184719.png" alt="完毕" title="完毕" loading="lazy"></p>
<p>7、耐心等待审核通过，会有邮件通知。大概3–14天。</p>
<h1 id="将已经申请好的eu域名托管到cloudflare">将已经申请好的eu域名托管到Cloudflare</h1>
<p>登入<a href="https://nic.eu.org/arf/en/">管理台</a>,将名称服务器改为cloudflare的就行了</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Gridea 上手教程——小白也可以用的 GitHub Pages 搭建工具]]></title>
        <id>https://lzh2665692.github.io/post/gridea</id>
        <link href="https://lzh2665692.github.io/post/gridea">
        </link>
        <updated>2022-04-09T13:29:47.000Z</updated>
        <content type="html"><![CDATA[<p>最近为了分享自己的学习心得，开始利用 GitHub Pages 搭建个人博客。但是水平实在太 ，所以没有选择主流的hexo，而是使用Gridea。初始配置简单，后续维护更是简单。对于我这种又懒又 的人来说再合适不过了。今天就总结出文章分享给大家。</p>
<p>本地软件安装<br>
Git 安装<br>
Gridea 的同步功能依赖本地 Git 客户端，所以我们需要先安装 Git。 Git官网下载平台对应的安装程序。安装没有特别的要求，一路下一步即可。</p>
<p>Gridea 安装<br>
Gridea官网下载对应平台的安装程序进行安装。</p>
<p>初始配置<br>
GitHub Pages 创建<br>
仓库创建<br>
首先，需要创建一个仓库，建议仓库为 http://username.github.io。根据官方文档， GitHub 会默认将名称符合要求的仓库设置成 GitHub Pages 可访问类型。例如我的用户名是 yym0924，所以仓库名就是http://yym0924.github.io。不过我创建仓库的时候并未自动启用 GitHub Pages，遇到这种情况手动开启即可。</p>
<p>基本设置<br>
开通 GitHub Pages<br>
这里也说明下手动启用 GitHub Pages 的方式。<br>
<img src="https://lzh2665692.github.io/post-images/1649511121985.jpg" alt="" loading="lazy"><br>
打开仓库的 Settings<br>
<img src="https://lzh2665692.github.io/post-images/1649511160373.jpg" alt="" loading="lazy"><br>
找到 GitHub Pages 设置的地方 点击 Choose a theme 随意选择一个主题。因为后续我们使用 Gridea 设置主题，这边选择主题只是为了开启 GitHub Pages 可访问类型。<br>
勾选上 repo 相关权限即可</p>
]]></content>
    </entry>
</feed>